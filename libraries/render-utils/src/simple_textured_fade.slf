<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  simple_textured_fade.frag
//  fragment shader
//
//  Created by Olivier Prat on 06/05/17.
//  Copyright 2017 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include gpu/Color.slh@>
<@include DeferredBufferWrite.slh@>

<@include Fade.slh@>

<@include render-utils/ShaderConstants.h@>

// the albedo texture
TEXTURE(0, sampler2D, originalTexture);

// the interpolated normal
INPUT(RENDER_UTILS_ATTR_NORMAL_WS, vec3, _normalWS);
INPUT(RENDER_UTILS_ATTR_COLOR, vec4, _color);
INPUT(RENDER_UTILS_ATTR_TEXCOORD01, vec4, _texCoord01);
#define _texCoord0 _texCoord01.xy
#define _texCoord1 _texCoord01.zw
INPUT(RENDER_UTILS_ATTR_POSITION_WS, vec4, _positionWS);

// Declare after all samplers to prevent sampler location mix up with originalTexture
<$declareFadeFragmentInstanced()$>

void main(void) {
    vec3 fadeEmissive;
    FadeObjectParams fadeParams;

    <$fetchFadeObjectParamsInstanced(fadeParams)$>
    applyFade(fadeParams, _positionWS.xyz, fadeEmissive);

    vec4 texel = texture(originalTexture, _texCoord0);
    float colorAlpha = _color.a;
    if (_color.a <= 0.0) {
        texel = color_sRGBAToLinear(texel);
        colorAlpha = -_color.a;
    }

    const float ALPHA_THRESHOLD = 0.999;
    if (colorAlpha * texel.a < ALPHA_THRESHOLD) {
        packDeferredFragmentTranslucent(
            normalize(_normalWS),
            colorAlpha * texel.a,
            _color.rgb * texel.rgb + fadeEmissive,
            DEFAULT_FRESNEL,
            DEFAULT_ROUGHNESS);
    } else {
        packDeferredFragment(
            normalize(_normalWS),
            1.0,
            _color.rgb * texel.rgb,
            DEFAULT_ROUGHNESS,
            DEFAULT_METALLIC,
            DEFAULT_EMISSIVE + fadeEmissive,
            DEFAULT_OCCLUSION,
            DEFAULT_SCATTERING);
    }
}