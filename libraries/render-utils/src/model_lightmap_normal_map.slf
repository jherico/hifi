<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  model_lightmap_normal_map.frag
//  fragment shader
//
//  Created by Samuel Gateau on 11/19/14.
//  Copyright 2014 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include DeferredBufferWrite.slh@>
<@include graphics/Material.slh@>
<@include graphics/MaterialTextures.slh@>
<@include render-utils/ShaderConstants.h@>

<$declareMaterialTextures(ALBEDO, ROUGHNESS, NORMAL, METALLIC)$>
<$declareMaterialLightmap()$>

INPUT(RENDER_UTILS_ATTR_POSITION_ES, vec4, _positionES);
INPUT(RENDER_UTILS_ATTR_TEXCOORD01, vec4, _texCoord01);
#define _texCoord0 _texCoord01.xy
#define _texCoord1 _texCoord01.zw
INPUT(RENDER_UTILS_ATTR_NORMAL_WS, vec3, _normalWS);
INPUT(RENDER_UTILS_ATTR_TANGENT_WS, vec3, _tangentWS);
INPUT(RENDER_UTILS_ATTR_COLOR, vec4, _color);

void main(void) {
    Material mat = getMaterial();
    BITFIELD matKey = getMaterialKey(mat);
    <$fetchMaterialTexturesCoord0(matKey, _texCoord0, albedo, roughness, normalTexel, metallicTex)$>
    <$fetchMaterialTexturesCoord1(matKey, _texCoord1, _SCRIBE_NULL, lightmapVal)$>
    
    vec3 fragNormal;
    <$evalMaterialNormalLOD(_positionES, normalTexel, _normalWS, _tangentWS, fragNormal)$>

    packDeferredFragmentLightmap(
        normalize(fragNormal.xyz),
        evalOpaqueFinalAlpha(getMaterialOpacity(mat), albedo.a),
        getMaterialAlbedo(mat) * albedo.rgb * _color.rgb,
        getMaterialRoughness(mat) * roughness,
        getMaterialMetallic(mat) * metallicTex,
        /*specular, // no use of */ getMaterialFresnel(mat),
        lightmapVal);
}
