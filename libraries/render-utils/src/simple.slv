<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  simple.vert
//  vertex shader
//
//  Created by Andrzej Kapolka on 9/15/14.
//  Copyright 2014 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include gpu/ShaderConstants.h@>
INPUT(GPU_ATTR_POSITION, vec4, inPosition);
INPUT(GPU_ATTR_NORMAL, vec4, inNormal);
INPUT(GPU_ATTR_COLOR, vec4, inColor);
INPUT(GPU_ATTR_TEXCOORD0, vec4, inTexCoord0);

<@include gpu/Color.slh@>
<@include gpu/Transform.slh@>
<$declareStandardTransform()$>

<@include render-utils/ShaderConstants.h@>

// the interpolated normal
OUTPUT(RENDER_UTILS_ATTR_NORMAL_WS, vec3, _normalWS);
OUTPUT(RENDER_UTILS_ATTR_NORMAL_MS, vec3, _normalMS);
OUTPUT(RENDER_UTILS_ATTR_COLOR, vec4, _color);
OUTPUT(RENDER_UTILS_ATTR_TEXCOORD01, vec4, _texCoord01);
OUTPUT(RENDER_UTILS_ATTR_POSITION_MS, vec4, _positionMS);
OUTPUT(RENDER_UTILS_ATTR_POSITION_ES, vec4, _positionES);

void main(void) {
    _color = color_sRGBAToLinear(inColor);
    _texCoord01.xy = inTexCoord0.st;
    _positionMS = inPosition;
    _normalMS = inNormal.xyz;

    // standard transform
    TransformCamera cam = getTransformCamera();
    TransformObject obj = getTransformObject();
    <$transformModelToEyeAndClipPos(cam, obj, inPosition, _positionES, gl_Position)$>
    <$transformModelToWorldDir(cam, obj, inNormal.xyz, _normalWS)$>
}