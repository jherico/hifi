<@include gpu/Config.slh@>
<$VERSION_HEADER$>
// <$_SCRIBE_FILENAME$> 
// Generated on <$_SCRIBE_DATE$>
//
//  Created by Hifi Engine Team.
//  Copyright 2013 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include gpu/ShaderConstants.h@>
INPUT(GPU_ATTR_POSITION, vec4, inPosition);
INPUT(GPU_ATTR_NORMAL, vec4, inNormal);
INPUT(GPU_ATTR_COLOR, vec4, inColor);
INPUT(GPU_ATTR_TEXCOORD0, vec4, inTexCoord0);
INPUT(GPU_ATTR_TANGENT, vec4, inTangent);
INPUT(GPU_ATTR_SKIN_CLUSTER_INDEX, uvec4, inSkinClusterIndex);
INPUT(GPU_ATTR_SKIN_CLUSTER_WEIGHT, vec4, inSkinClusterWeight);
INPUT(GPU_ATTR_TEXCOORD1, vec4, inTexCoord1);

<@include gpu/Color.slh@>
<@include gpu/Transform.slh@>
<@include render-utils/ShaderConstants.h@>
<$declareStandardTransform()$>

<@include graphics/MaterialTextures.slh@>
<$declareMaterialTexMapArrayBuffer()$>

<@include MeshDeformer.slh@>
<$declareMeshDeformer(1, 1, 1, 1, 1)$>
<$declareMeshDeformerActivation(1, 1)$>

<@include render-utils/ShaderConstants.h@>

//OUTPUT(RENDER_UTILS_ATTR_POSITION_WS, vec4, _positionWS);
OUTPUT(RENDER_UTILS_ATTR_POSITION_ES, vec4, _positionES);
OUTPUT(RENDER_UTILS_ATTR_TEXCOORD01, vec4, _texCoord01);
OUTPUT(RENDER_UTILS_ATTR_NORMAL_WS, vec3, _normalWS);
OUTPUT(RENDER_UTILS_ATTR_TANGENT_WS, vec3, _tangentWS);
OUTPUT(RENDER_UTILS_ATTR_COLOR, vec4, _color);

void main(void) {
    vec4 deformedPosition = vec4(0.0, 0.0, 0.0, 0.0);
    vec3 deformedNormal = vec3(0.0, 0.0, 0.0);
    vec3 deformedTangent = vec3(0.0, 0.0, 0.0);
    evalMeshDeformer(inPosition, deformedPosition, inNormal.xyz, deformedNormal, inTangent.xyz, deformedTangent, 
                    meshDeformer_doSkinning(_drawCallInfo.y), inSkinClusterIndex, inSkinClusterWeight,
                    meshDeformer_doBlendshape(_drawCallInfo.y), gl_VertexID);

    // pass along the color
    _color.rgb = color_sRGBToLinear(inColor.rgb);
    _color.a = inColor.a;

    TexMapArray texMapArray = getTexMapArray();
    <$evalTexMapArrayTexcoord0(texMapArray, inTexCoord0, _texCoord01.xy)$>
    <$evalTexMapArrayTexcoord1(texMapArray, inTexCoord1, _texCoord01.zw)$>

    // standard transform
    vec4 _positionWS;
    TransformCamera cam = getTransformCamera();
    TransformObject obj = getTransformObject();
    <$transformModelToWorldAndEyeAndClipPos(cam, obj, deformedPosition, _positionWS, _positionES, gl_Position)$>
    <$transformModelToWorldDir(cam, obj, deformedNormal, _normalWS.xyz)$>
    <$transformModelToWorldDir(cam, obj, deformedTangent, _tangentWS.xyz)$>
}
